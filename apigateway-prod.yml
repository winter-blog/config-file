eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: ${EUREKA_SERVER}

spring:
  application:
    name: ${NAME}
  rabbitmq:
    host: ${RABBITMQ_HOST}
    port: ${RABBITMQ_PORT}
    username: ${RABBITMQ_USER_NAME}
    password: ${RABBITMQ_USER_PASS}
  cloud:
    gateway:
      routes:
        - id: member-service
          uri: lb://MEMBER-SERVICE
          predicates:
            - Path=/member-service/api/*/members
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/member-service/(?<segment>.*), /$\{segment}
        - id: member-service
          uri: lb://MEMBER-SERVICE
          predicates:
            - Path=/member-service/api/*/members/check/**
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/member-service/(?<segment>.*), /$\{segment} 
        - id: member-service
          uri: lb://MEMBER-SERVICE
          predicates:
            - Path=/member-service/api/*/members/internal/**
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/member-service/(?<segment>.*), /$\{segment}            
        - id: member-service
          uri: lb://MEMBER-SERVICE
          predicates:
            - Path=/member-service/api/*/members/**
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/member-service/(?<segment>.*), /$\{segment}
            - AccessTokenAuthorizationHeaderFilter
        - id: auth-service
          uri: lb://AUTH-SERVICE
          predicates:
            - Path=/auth-service/login
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/auth-service/(?<segment>.*), /$\{segment}
        - id: auth-service
          uri: lb://AUTH-SERVICE
          predicates:
            - Path=/auth-service/logout
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/auth-service/(?<segment>.*), /$\{segment}
            - AccessTokenAuthorizationHeaderFilter
        - id: auth-service
          uri: lb://AUTH-SERVICE
          predicates:
            - Path=/auth-service/refresh-token
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/auth-service/(?<segment>.*), /$\{segment}
            - RefreshTokenAuthorizationHeaderFilter
        - id: auth-service
          uri: lb://AUTH-SERVICE
          predicates:
            - Path=/auth-service/*/valid
            - Method=GET
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/auth-service/(?<segment>.*), /$\{segment}
        - id: post-service
          uri: lb://POST-SERVICE
          predicates:
            - Path=/post-service/api/*/posts/**
            - Method=GET
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/post-service/(?<segment>.*), /$\{segment}            
        - id: post-service
          uri: lb://POST-SERVICE
          predicates:
            - Path=/post-service/api/*/posts/**
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/post-service/(?<segment>.*), /$\{segment}            
            - AccessTokenAuthorizationHeaderFilter
        - id: post-service
          uri: lb://POST-SERVICE
          predicates:
            - Path=/post-service/api/*/images/**
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/post-service/(?<segment>.*), /$\{segment}            
            - AccessTokenAuthorizationHeaderFilter
      default-filters:
        - DedupeResponseHeader=Access-Control-Allow-Origin Access-Control-Allow-Credentials
      globalcors:
        cors-configurations:
          '[/**]':
            allowedOrigins: 
              - http://localhost:3000
              - http://ec2-3-34-53-11.ap-northeast-2.compute.amazonaws.com:8070
              - http://3.39.159.26:3000
            allow-credentials: true
            allowedHeaders: '*'
            # allowedHeaders: '*'
            # - authorization
            # - content-type
            # - credential
            # - X-AUTH-TOKEN
            # - X-CSRF-TOKEN
            allowedMethods:
              - GET
              - POST
              - PUT
              - PATCH            
              - DELETE
              - OPTIONS

jwt:
  secret-key: ${JWT_SECRET_KEY}